{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appLocation": {
      "type": "string"
    },
    "functionsLocation": {
      "type": "string"      
    },
    "storageType": {
      "type": "string",
      "allowedValues": [
        "Standard_LRS",
        "Standard_ZRS"
      ]
    },
    "botLoggingRetentionDays": {
      "type": "int"
    },
    "telegramBotId": {
      "type": "securestring"
    },
    "telegramBotSecret": {
      "type": "securestring"
    },
    "adminSubscriptionsSecret": {
      "type": "securestring"
    },
    "adminBanSecret": {
      "type": "securestring"
    },
    "deployEventGridSubscriptions": {
      "type": "bool"
    }
  },
  "variables": {
    "appEventsTopic": {
      "name": "[concat('moto-health-events-', uniqueString(resourceGroup().id))]",
      "apiVersion": "2019-06-01"
    },

    "storageName": "[concat('storage', uniqueString(resourceGroup().id))]",

    "botAppInsightsName": "[concat('moto-health-bot-insights-', uniqueString(resourceGroup().id))]",
    "botHostingPlanName": "[concat('moto-health-bot-hosting-', uniqueString(resourceGroup().id))]",
    "botAppName": "[concat('moto-health-bot-app-', uniqueString(resourceGroup().id))]",

    "functionsAppName": "[concat('moto-health-functions-', uniqueString(resourceGroup().id))]",
    "functionsStorageName": "[concat('functions', uniqueString(resourceGroup().id))]",
    "functionsAppInsightsName": "[concat('moto-health-functions-insights-', uniqueString(resourceGroup().id))]",

    "accidentAlerting": {
      "eventType": "MotoHealth.Events.AccidentAlerted",
      "handlingFunctionName": "AccidentAlerting_WorkflowTrigger"
    }
  },
  "resources": [
    {
      "name": "[variables('appEventsTopic').name]",
      "type": "Microsoft.EventGrid/topics",
      "apiVersion": "[variables('appEventsTopic').apiVersion]",
      "location": "[parameters('appLocation')]",
      "tags": {
        "displayName": "Integration EventGrid Topic"
      },
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "inputSchema": "EventGridSchema"
      }
    },
    {
      "name": "[variables('storageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "location": "[parameters('appLocation')]",
      "tags": {
        "displayName": "Storage Account"
      },
      "kind": "StorageV2",
      "sku": {
        "name": "[parameters('storageType')]"
      }
    },
    {
      "name": "[variables('botHostingPlanName')]",
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "location": "[parameters('appLocation')]",
      "tags": {
        "displayName": "Bot Hosting Plan"
      },
      "kind": "linux",
      "sku": {
        "name": "B1",
        "capacity": 0
      },
      "properties": {
        "reserved": true
      }
    },
    {
      "name": "[variables('botAppInsightsName')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "location": "[parameters('appLocation')]",
      "kind": "web",
      "tags": {
        "displayName": "Bot App Insights",
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('botAppName'))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "ApplicationId": "[variables('botAppInsightsName')]"
      }
    },
    {
      "name": "[variables('botAppName')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-02-01",
      "location": "[parameters('appLocation')]",
      "kind": "app,linux",
      "tags": {
        "displayName": "Bot App"
      },
      "properties": {
        "serverFarmId": "[variables('botHostingPlanName')]",
        "clientAffinityEnabled": false
      },
      "resources": [
        {
          "name": "web",
          "type": "config",
          "apiVersion": "2018-02-01",
          "location": "[parameters('appLocation')]",
          "dependsOn": [ "[resourceId('Microsoft.Web/sites', variables('botAppName'))]" ],
          "properties": {
            "alwaysOn": true,
            "linuxFxVersion": "DOTNETCORE|3.1"
          }
        },
        {
            "name": "appsettings",
            "type": "config",
            "apiVersion": "2018-02-01",
            "location": "[parameters('appLocation')]",
            "dependsOn": [ "[resourceId('Microsoft.Web/sites', variables('botAppName'))]" ],
            "properties": {
              "WEBSITE_HTTPLOGGING_RETENTION_DAYS": "[parameters('botLoggingRetentionDays')]",
              "ApplicationInsights__InstrumentationKey": "[reference(resourceId('Microsoft.Insights/components', variables('botAppInsightsName')), '2015-05-01').InstrumentationKey]",
              "Telegram__Client__BotId": "[parameters('telegramBotId')]",
              "Telegram__Client__BotSecret": "[parameters('telegramBotSecret')]",
              "Telegram__Webhook__BaseUrl": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('botAppName'))).defaultHostName)]",
              "Secrets__BanSecret": "[parameters('adminBanSecret')]",
              "Secrets__SubscriptionSecret": "[parameters('adminSubscriptionsSecret')]",
              "AzureStorage__StorageAccountConnectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')), '2019-06-01').keys[0].value)]",
              "AppEventsTopic__TopicEndpoint": "[reference(resourceId('Microsoft.EventGrid/topics', variables('appEventsTopic').name), variables('appEventsTopic').apiVersion).endpoint]",
              "AppEventsTopic__TopicKey": "[listKeys(resourceId('Microsoft.EventGrid/topics', variables('appEventsTopic').name), variables('appEventsTopic').apiVersion).key1]"
            }
        }
      ],
      "dependsOn": [ 
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('botHostingPlanName'))]",
        "[resourceId('Microsoft.EventGrid/topics', variables('appEventsTopic').name)]",
        "[resourceId('Microsoft.Insights/components', variables('botAppInsightsName'))]"
       ]
    },
    {
      "name": "[variables('functionsStorageName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "location": "[parameters('functionsLocation')]",
      "tags": {
        "displayName": "Functions Storage"
      },
      "kind": "StorageV2",
      "sku": {
        "name": "[parameters('storageType')]"
      }
    },
    {
      "name": "[variables('functionsAppInsightsName')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "kind": "web",
      "location": "[parameters('functionsLocation')]",
      "tags": {
        "displayName": "Functions App Insights",
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('functionsAppName'))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "ApplicationId": "[variables('functionsAppInsightsName')]"
      }
    },
    {
      "name": "[variables('functionsAppName')]",
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-02-01",
      "kind": "functionapp,linux",
      "location": "[parameters('functionsLocation')]",
      "tags": {
        "displayName": "Functions App"
      },
      "properties": {
        "reserved": true,
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionsStorageName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionsStorageName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('functionsAppInsightsName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "ConnectionStrings__StorageAccount",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "Telegram__BotId",
              "value": "[parameters('telegramBotId')]"
            },
            {
              "name": "Telegram__BotSecret",
              "value": "[parameters('telegramBotSecret')]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/topics', variables('appEventsTopic').name)]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('functionsStorageName'))]",
        "[resourceId('Microsoft.Insights/components', variables('functionsAppInsightsName'))]"
      ]
    },
    {
      "name": "[concat(variables('appEventsTopic').name, '/Microsoft.EventGrid/', toLower(replace(variables('accidentAlerting').eventType, '.', '-')))]",
      "type": "Microsoft.EventGrid/topics/providers/eventSubscriptions",
      "apiVersion": "2020-06-01",
      "condition": "[parameters('deployEventGridSubscriptions')]",
      "properties": {
        "destination": {
          "endpointType": "AzureFunction",
          "properties": {
            "resourceId": "[concat(resourceId('Microsoft.Web/sites', variables('functionsAppName')), '/functions/', variables('accidentAlerting').handlingFunctionName)]",
            "maxEventsPerBatch": 1,
            "preferredBatchSizeInKilobytes": 64
          }
        },
        "filter": {
          "includedEventTypes": [
            "[variables('accidentAlerting').eventType]"
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventGrid/topics', variables('appEventsTopic').name)]"
      ]
    }
  ],
  "outputs": {
    "botAppName": {
      "type": "string",
      "value": "[variables('botAppName')]"
    },
    "functionsAppName": {
      "type": "string",
      "value": "[variables('functionsAppName')]"
    }
  }
}
